package resources

import (
	"time"

	"github.com/GeertJohan/go.rice/embedded"
)

func init() {

	// define files
	file3 := &embedded.EmbeddedFile{
		Filename:    "html/index.html",
		FileModTime: time.Unix(1586663867, 0),

		Content: string("<!DOCTYPE html>\n<html lang=\"en\" xmlns:v-slot=\"http://www.w3.org/1999/XSL/Transform\">\n<head>\n    <meta charset=\"UTF-8\">\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"//unpkg.com/bootstrap/dist/css/bootstrap.min.css\"/>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.css\"/>\n    <title>file bed</title>\n</head>\n<body>\n<div class=\"container\">\n\n    <b-input-group id=\"loginForm\">\n        <b-form-input size=\"sm\" type=\"password\" placeholder=\"token\" v-model=\"token\"></b-form-input>\n        <b-button size=\"sm\" variant=\"outline-primary\" :disabled=\"loading\" @click=\"login\">login</b-button>\n    </b-input-group>\n    <br/>\n    <form id=\"uploadFileForm\">\n        <b-input-group>\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"sort\" v-model=\"sort\" @input=\"input\"></b-form-input>\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"date\" v-model=\"date\" @input=\"input\"></b-form-input>\n            <b-form-file size=\"sm\" v-model=\"file\" @input=\"input\"></b-form-file>\n        </b-input-group>\n        <b-input-group>\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"filePath\" v-model=\"filePath\"></b-form-input>\n            <b-button size=\"sm\" variant=\"outline-primary\" :disabled=\"loading\" @click=\"upload\">upload</b-button>\n        </b-input-group>\n    </form>\n    <br/>\n    <form id=\"uploadUrlForm\">\n        <b-input-group>\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"sort\" v-model=\"sort\" @input=\"input\"></b-form-input>\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"date\" v-model=\"date\" @input=\"input\"></b-form-input>\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"url\" v-model=\"url\" @input=\"input\"></b-form-input>\n        </b-input-group>\n        <b-input-group>\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"filePath\" v-model=\"filePath\"></b-form-input>\n            <b-button size=\"sm\" variant=\"outline-primary\" :disabled=\"loading\" @click=\"upload\">upload</b-button>\n        </b-input-group>\n    </form>\n    <br/>\n    <b-table id=\"lastFileInfoTable\" stacked=\"xl\" striped hover responsive small\n             :fields=\"fields\" :items=\"infos\" :busy=\"loading\">\n        <template v-slot:cell(name)=\"data\">\n            <code @dblclick=\"openFile(data.item.path)\">{{data.item.name}}</code>\n        </template>\n        <template v-slot:cell(md5)=\"data\">\n            <code>{{data.item.md5}}</code>\n        </template>\n        <template v-slot:cell(url)=\"data\">\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"url\" disabled :value=\"'/'+data.item.url\"></b-form-input>\n        </template>\n        <template v-slot:cell(deal)=\"data\">\n            <b-button-group>\n                <b-button size=\"sm\" variant=\"outline-primary\" :disabled=\"data.item.loading\"\n                          @click=\"info(data.item.path)\">\n                    info\n                </b-button>\n                <b-button size=\"sm\" variant=\"outline-danger\" :disabled=\"data.item.loading\"\n                          @click=\"deleteFile(data.item.path)\">delete\n                </b-button>\n            </b-button-group>\n        </template>\n\n        <template v-slot:table-busy>\n            <div class=\"text-center text-primary\">\n                <b-spinner class=\"align-middle\"></b-spinner>\n                <strong>Loading...</strong>\n            </div>\n        </template>\n    </b-table>\n    <br/>\n    <form id=\"pullSyncForm\">\n        <b-input-group>\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"pullSyncHost\" v-model=\"pullSyncHost\"></b-form-input>\n            <b-form-input size=\"sm\" type=\"password\" placeholder=\"token\" v-model=\"token\"></b-form-input>\n            <b-button size=\"sm\" variant=\"outline-primary\" :disabled=\"loading\" @click=\"pull\">pull</b-button>\n        </b-input-group>\n    </form>\n    <form id=\"pushSyncForm\">\n        <b-input-group>\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"pushSyncHost\" v-model=\"pushSyncHost\"></b-form-input>\n            <b-form-input size=\"sm\" type=\"password\" placeholder=\"token\" v-model=\"token\"></b-form-input>\n            <b-button size=\"sm\" variant=\"outline-primary\" :disabled=\"loading\" @click=\"push\">push</b-button>\n        </b-input-group>\n    </form>\n    <br/>\n    <b-breadcrumb id=\"filePathBreadcrumb\">\n        <b-breadcrumb-item @click=\"go(-1)\">\n            <b-icon icon=\"house-fill\"></b-icon>\n        </b-breadcrumb-item>\n        <b-breadcrumb-item v-for=\"(breadcrumb, index) in breadcrumbs\" @click=\"go(index)\">\n            {{breadcrumb.name}}\n        </b-breadcrumb-item>\n    </b-breadcrumb>\n    <b-table id=\"fileInfoTable\" stacked=\"xl\" striped hover responsive small\n             :fields=\"fields\" :items=\"infos\" :busy=\"loading\">\n        <template v-slot:cell(name)=\"data\">\n            <code @dblclick=\"openFile(data.item.path)\">{{data.item.name}}</code>\n        </template>\n        <template v-slot:cell(md5)=\"data\">\n            <code>{{data.item.md5}}</code>\n        </template>\n        <template v-slot:cell(url)=\"data\">\n            <b-form-input size=\"sm\" type=\"text\" placeholder=\"url\" disabled v-if=\"data.item.isFile\"\n                          :value=\"'/'+data.item.url\">\n            </b-form-input>\n        </template>\n        <template v-slot:cell(deal)=\"data\">\n            <b-button-group>\n                <b-button size=\"sm\" variant=\"outline-primary\" :disabled=\"data.item.loading\"\n                          @click=\"info(data.item.path)\">info\n                </b-button>\n                <b-button size=\"sm\" variant=\"outline-danger\" :disabled=\"data.item.loading\"\n                          @click=\"deleteFile(data.item.path)\">delete\n                </b-button>\n            </b-button-group>\n        </template>\n\n        <template v-slot:table-busy>\n            <div class=\"text-center text-primary\">\n                <b-spinner class=\"align-middle\"></b-spinner>\n                <strong>Loading...</strong>\n            </div>\n        </template>\n    </b-table>\n\n\n</div>\n</body>\n<script src=\"//vuejs.org/js/vue.min.js\"></script>\n<script src=\"//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.js\"></script>\n<script src=\"//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue-icons.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/qs/6.9.3/qs.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js\"></script>\n<script>\n    window.onbeforeunload = (event) => 'maybe some data not save'\n    var instance = axios.create({timeout: 60 * 60 * 1000})\n\n    const loginFormVue = new Vue({\n        el: '#loginForm',\n        data: {\n            token: null,\n            loading: false\n        },\n        methods: {\n            login() {\n                if (this.token == null || this.token == '') {\n                    alert('token为空')\n                    return\n                }\n                this.loading = true\n                instance.post(\"login\", Qs.stringify({token: this.token}))\n                    .then(response => {\n                        this.loading = false\n                        const result = response.data\n                        alert(result.code == 1 ? '登录成功' : '登录失败')\n                        if (result.code == 1) {\n                            this.init()\n                            this.setLogin()\n                            flush()\n                        }\n                    })\n                    .catch(error => {\n                        this.loading = false\n                        alert(\"error: \" + JSON.stringify(error))\n                    })\n            },\n            setLogin() {\n                setCookie('login', 'login')\n            },\n            getLogin() {\n                return getCookie('login') == 'login'\n            },\n            init() {\n                this.token = null\n            }\n        }\n    })\n\n    const uploadFileVue = new Vue({\n        el: '#uploadFileForm',\n        data: {\n            file: null,\n            sort: '',\n            date: formatDate(new Date(), 'yyyyMMdd'),\n            filePath: null,\n            loading: false\n        },\n        methods: {\n            upload() {\n                if (this.file == null || this.filePath == null || this.filePath == '') {\n                    alert('文件或者文件路径为空')\n                    return\n                }\n                this.loading = true\n                const param = new FormData()\n                param.append(\"filePath\", this.filePath)\n                param.append(\"file\", this.file)\n                instance.post(\"admin/uploadFile\", param, {headers: {'Content-Type': 'multipart/form-data'}})\n                    .then(response => {\n                        this.loading = false\n                        const result = response.data\n                        if (result.code == 1) {\n                            this.init()\n                            flush()\n                        } else {\n                            alert(result.message)\n                        }\n                    })\n                    .catch(error => {\n                        this.loading = false\n                        alert(\"error: \" + JSON.stringify(error))\n                    })\n            },\n            input() {\n                if (this.sort != null) {\n                    this.sort = this.sort.replace(/\\s/g, '');\n                }\n                if (this.file != null) {\n                    this.filePath = createFilePath(this.sort, this.date, this.file.name)\n                }\n            },\n            init() {\n                this.file = null\n                this.filePath = null\n            }\n        }\n    })\n\n    const uploadUrlVue = new Vue({\n        el: '#uploadUrlForm',\n        data: {\n            url: null,\n            sort: '',\n            date: formatDate(new Date(), 'yyyyMMdd'),\n            filePath: null,\n            loading: false\n        },\n        methods: {\n            upload() {\n                if (this.url == null || this.url == '' || this.filePath == null || this.filePath == '') {\n                    alert('URL或者文件路径为空')\n                    return\n                }\n                this.loading = true\n                instance.post(\"admin/uploadUrl\", Qs.stringify({filePath: this.filePath, url: this.url}))\n                    .then(response => {\n                        this.loading = false\n                        const result = response.data\n                        if (result.code == 1) {\n                            this.init()\n                            flush()\n                        } else {\n                            alert(result.message)\n                        }\n                    })\n                    .catch(error => {\n                        this.loading = false\n                        alert(\"error: \" + JSON.stringify(error))\n                    })\n            },\n            input() {\n                if (this.sort != null) {\n                    this.sort = this.sort.replace(/\\s/g, '');\n                }\n                if (this.url != null) {\n                    let filename = this.url.split('//')\n                    filename = filename[filename.length - 1]\n                    filename = filename.split('?')\n                    filename = filename[0].replace(/:/g, '_').replace(/\\//g, '-').replace(/\\\\/g, '-')\n                    this.filePath = createFilePath(this.sort, this.date, filename)\n                }\n            },\n            init() {\n                this.url = null\n                this.filePath = null\n            }\n        }\n    })\n\n    const lastFileInfoVue = new Vue({\n        el: '#lastFileInfoTable',\n        data: {\n            fields: [\n                {\n                    key: 'name',\n                    label: 'name',\n                    sortable: true,\n                },\n                {\n                    key: 'size',\n                    label: 'size',\n                    sortable: true,\n                },\n                {\n                    key: 'count',\n                    label: 'count',\n                    sortable: true,\n                },\n                {\n                    key: 'md5',\n                    label: 'md5',\n                },\n                {\n                    key: 'url',\n                    label: 'url',\n                },\n                {\n                    key: 'deal',\n                    label: 'deal',\n                },\n            ],\n            infos: [],\n            loading: false,\n        },\n        methods: {\n            listLastFileInfo() {\n                this.loading = true\n                instance.get(\"admin/listLastFileInfo\", {params: {}})\n                    .then(response => {\n                        this.loading = false\n                        const result = response.data\n                        if (result.code == 1) {\n                            if (result.data == null || result.data.length == 0) {\n                                alert('没有最新文件')\n                            }\n                            this.infos = initFileInfos(result.data).reverse()\n                        } else {\n                            alert(result.message)\n                        }\n                    })\n                    .catch(error => {\n                        this.loading = false\n                        alert(\"error: \" + JSON.stringify(error))\n                    })\n            },\n            openFile(path) {\n                let index = 0\n                for (; index < this.infos.length; index++) {\n                    if (this.infos[index].path == path) {\n                        break\n                    }\n                }\n                if (index == this.infos.length) {\n                    alert('非法打开文件的路径: ' + path)\n                    return\n                }\n                if (this.infos[index].isFile) {\n                    window.open(this.infos[index].url)\n                } else {\n                    alert('明明是最近文件，但居然是文件夹？！？')\n                }\n            },\n            info(path) {\n                let index = 0\n                for (; index < this.infos.length; index++) {\n                    if (this.infos[index].path == path) {\n                        break\n                    }\n                }\n                if (index == this.infos.length) {\n                    alert('非法查询文件的路径: ' + path)\n                    return\n                }\n                getFileCompleteInfo(this.infos, index)\n            },\n            deleteFile(path) {\n                let index = 0\n                for (; index < this.infos.length; index++) {\n                    if (this.infos[index].path == path) {\n                        break\n                    }\n                }\n                if (index == this.infos.length) {\n                    alert('非法删除文件的路径: ' + path)\n                    return\n                }\n                removeFile(this.infos, index)\n            },\n        }\n    })\n\n    const pullSyncVue = new Vue({\n        el: '#pullSyncForm',\n        data: {\n            pullSyncHost: null,\n            token: null,\n            loading: false\n        },\n        methods: {\n            pull() {\n                if (this.pullSyncHost == null || this.pullSyncHost == '' || this.token == null || this.token == '') {\n                    alert('pull同步URL或者token为空')\n                    return\n                }\n                this.loading = true\n                instance.post(\"admin/pullSyncFile\", Qs.stringify({pullSyncHost: this.pullSyncHost, token: this.token}))\n                    .then(response => {\n                        this.loading = false\n                        const result = response.data\n                        alert('失败数量: ' + result.data + ', 失败原因: ' + result.message)\n                        if (result.code == 1) {\n                            this.init()\n                            flush()\n                        }\n                    })\n                    .catch(error => {\n                        this.loading = false\n                        alert(\"error: \" + JSON.stringify(error))\n                    })\n            },\n            init() {\n                this.pullSyncHost = null\n                this.token = null\n            }\n        }\n    })\n\n    const pushSyncVue = new Vue({\n        el: '#pushSyncForm',\n        data: {\n            pushSyncHost: null,\n            token: null,\n            loading: false\n        },\n        methods: {\n            push() {\n                if (this.pushSyncHost == null || this.pushSyncHost == '' || this.token == null || this.token == '') {\n                    alert('push同步URL或者token为空')\n                    return\n                }\n                this.loading = true\n                instance.post(\"admin/pushSyncFile\", Qs.stringify({pushSyncHost: this.pushSyncHost, token: this.token}))\n                    .then(response => {\n                        this.loading = false\n                        const result = response.data\n                        alert('失败数量: ' + result.data + ', 失败原因: ' + result.message)\n                        if (result.code == 1) {\n                            this.init()\n                            flush()\n                        }\n                    })\n                    .catch(error => {\n                        this.loading = false\n                        alert(\"error: \" + JSON.stringify(error))\n                    })\n            },\n            init() {\n                this.pushSyncHost = null\n                this.token = null\n            }\n        }\n    })\n\n    const filePathVue = new Vue({\n        el: '#filePathBreadcrumb',\n        data: {\n            breadcrumbs: [],\n        },\n        methods: {\n            go(index) {\n                if (index == -1) {\n                    fileInfoVue.init('/')\n                    return\n                }\n                fileInfoVue.init(this.breadcrumbs[index].path)\n            },\n            init(path) {\n                this.breadcrumbs = []\n                const names = path.split('/')\n                let filePath = ''\n                for (let i = 0; i < names.length; i++) {\n                    if (names[i] == '') {\n                        continue\n                    }\n                    filePath = filePath + '/' + names[i]\n                    this.breadcrumbs.push({name: names[i], path: filePath})\n                }\n            }\n        }\n    })\n\n    const fileInfoVue = new Vue({\n        el: '#fileInfoTable',\n        data: {\n            fields: [\n                {\n                    key: 'name',\n                    label: 'name',\n                    sortable: true,\n                },\n                {\n                    key: 'size',\n                    label: 'size',\n                    sortable: true,\n                },\n                {\n                    key: 'count',\n                    label: 'count',\n                    sortable: true,\n                },\n                {\n                    key: 'md5',\n                    label: 'md5',\n                },\n                {\n                    key: 'url',\n                    label: 'url',\n                },\n                {\n                    key: 'deal',\n                    label: 'deal',\n                },\n            ],\n            folderPath: '',\n            infos: [],\n            loading: false,\n        },\n        methods: {\n            listFolderInfo() {\n                this.loading = true\n                instance.get(\"admin/listFolderInfo\", {params: {folderPath: this.folderPath}})\n                    .then(response => {\n                        this.loading = false\n                        const result = response.data\n                        if (result.code == 1) {\n                            if (result.data == null || result.data.length == 0) {\n                                alert('此目录下没有文件')\n                            }\n                            this.infos = initFileInfos(result.data)\n                            filePathVue.init(this.folderPath)\n                        } else {\n                            alert(result.message)\n                        }\n                    })\n                    .catch(error => {\n                        this.loading = false\n                        alert(\"error: \" + JSON.stringify(error))\n                    })\n            },\n            init(path) {\n                this.folderPath = path\n                this.listFolderInfo()\n            },\n            openFile(path) {\n                let index = 0\n                for (; index < this.infos.length; index++) {\n                    if (this.infos[index].path == path) {\n                        break\n                    }\n                }\n                if (index == this.infos.length) {\n                    alert('非法打开文件的路径: ' + path)\n                    return\n                }\n                if (this.infos[index].isFile) {\n                    window.open(this.infos[index].url)\n                } else {\n                    this.init(this.infos[index].path)\n                }\n            },\n            info(path) {\n                let index = 0\n                for (; index < this.infos.length; index++) {\n                    if (this.infos[index].path == path) {\n                        break\n                    }\n                }\n                if (index == this.infos.length) {\n                    alert('非法查询文件的路径: ' + path)\n                    return\n                }\n                getFileCompleteInfo(this.infos, index)\n            },\n            deleteFile(path) {\n                let index = 0\n                for (; index < this.infos.length; index++) {\n                    if (this.infos[index].path == path) {\n                        break\n                    }\n                }\n                if (index == this.infos.length) {\n                    alert('非法删除文件的路径: ' + path)\n                    return\n                }\n                removeFile(this.infos, index)\n            },\n        }\n    })\n\n    function removeFile(infos, index) {\n        if (!infos[index].isFile) {\n            alert(\"所删除不是文件\")\n            return\n        }\n        if (!confirm(\"确实删除文件？！？: \" + infos[index].path)) {\n            return\n        }\n        infos[index].loading = true\n        instance.post(\"admin/removeFile\", Qs.stringify({filePath: infos[index].path}))\n            .then(response => {\n                infos[index].loading = false\n                const result = response.data\n                alert(result.code == 1 ? '删除成功' : '删除失败')\n                if (result.code == 1) {\n                    flush()\n                }\n            })\n            .catch(error => {\n                infos[index].loading = false\n                alert(\"error: \" + JSON.stringify(error))\n            })\n    }\n\n    function getFileCompleteInfo(infos, index) {\n        infos[index].loading = true\n        instance.get(\"admin/getFileCompleteInfo\", {params: {fileOrFolderPath: infos[index].path}})\n            .then(response => {\n                infos[index].loading = false\n                const result = response.data\n                if (result.code == 1) {\n                    const info = initFileInfo(result.data)\n                    infos[index].size = info.size\n                    infos[index].count = info.count\n                    infos[index].md5 = info.md5\n                } else {\n                    alert(result.message)\n                }\n            })\n            .catch(error => {\n                infos[index].loading = false\n                alert(\"error: \" + JSON.stringify(error))\n            })\n    }\n\n    function flush() {\n        lastFileInfoVue.listLastFileInfo()\n        fileInfoVue.listFolderInfo()\n    }\n\n    function initFileInfos(infos) {\n        if (infos == null) {\n            return []\n        }\n        for (let i = 0; i < infos.length; i++) {\n            infos[i] = initFileInfo(infos[i])\n        }\n        return infos\n    }\n\n    function initFileInfo(info) {\n        if (info == null) {\n            return null\n        }\n        info.loading = false\n        info.url = encodeURI(info.url)\n        if (info.size != undefined) {\n            info.size = formatFileSize(info.size)\n        }\n        if (info.url.startsWith('/')) {\n            info.url = info.url.substring(1)\n        }\n        return info\n    }\n\n    function formatFileSize(size) {\n        if (size < 0) return '非法大小: ' + size\n        if (size == 0) return '0 B'\n        var s = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];\n        var e = Math.floor(Math.log(size) / Math.log(1024));\n        return (size / Math.pow(1024, Math.floor(e))).toFixed(2) + \"\" + s[e];\n    }\n\n    function createFilePath(sort, date, filename) {\n        let filePath = filename\n        if (date != null && date != '') {\n            filePath = date + '/' + filePath\n        }\n        if (sort != null && sort != '') {\n            filePath = sort + '/' + filePath\n        }\n        return filePath\n    }\n\n    function formatDate(date, fmt) {\n        let o = {\n            'M+': date.getMonth() + 1, //月份\n            'd+': date.getDate(), //日\n            'h+': date.getHours(), //小时\n            'm+': date.getMinutes(), //分\n            's+': date.getSeconds(), //秒\n            'q+': Math.floor((date.getMonth() + 3) / 3), //季度\n            'S': date.getMilliseconds() //毫秒\n        }\n        if (/(y+)/.test(fmt)) {\n            fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length))\n        }\n        for (let k in o) {\n            if (new RegExp('(' + k + ')').test(fmt)) {\n                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1)\n                    ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)))\n            }\n        }\n        return fmt\n    }\n\n    function getCookieFromString(cookieString, name) {\n        if (cookieString == null) {\n            return null\n        }\n        let nameEQ = name + '='\n        let ca = cookieString.split(';')\n        for (let i = 0; i < ca.length; i++) {\n            let c = ca[i]\n            while (c.charAt(0) == ' ') c = c.substring(1, c.length)\n            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length)\n        }\n        return null\n    }\n\n    function getCookie(name) {\n        return getCookieFromString(document.cookie, name)\n    }\n\n    function setCookie(key, value) {\n        let date = new Date()\n        date.setTime(date.getTime() + (1000 * 60 * 60))\n        document.cookie = key + '=' + value + '; expires=' + date.toGMTString()\n    }\n\n    if (loginFormVue.getLogin()) {\n        flush()\n    }\n</script>\n</html>"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1586603466, 0),
		ChildFiles: []*embedded.EmbeddedFile{},
	}
	dir2 := &embedded.EmbeddedDir{
		Filename:   "html",
		DirModTime: time.Unix(1586663867, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file3, // "html/index.html"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{
		dir2, // "html"

	}
	dir2.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`static`, &embedded.EmbeddedBox{
		Name: `static`,
		Time: time.Unix(1586603466, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"":     dir1,
			"html": dir2,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"html/index.html": file3,
		},
	})
}
